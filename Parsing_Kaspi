import time
import random
import csv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup

# Конфигурация
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15"
]
BASE_URL = "https://kaspi.kz/shop/c/notebooks/"
DELAY_RANGE = (1, 3)  # Случайные задержки между запросами
MAX_RETRIES = 3
OUTPUT_FILE = "kaspi_notebooks.csv"

def setup_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Фоновый режим
    options.add_argument(f"user-agent={random.choice(USER_AGENTS)}")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    
    service = Service(executable_path=r"C:\your\path\to\chromedriver.exe")
    driver = webdriver.Chrome(service=service, options=options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    return driver

def parse_product_page(driver, product_url):
    for _ in range(MAX_RETRIES):
        try:
            driver.get(product_url)
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".specifications-list__el"))
            )
            time.sleep(random.uniform(*DELAY_RANGE))
            
            soup = BeautifulSoup(driver.page_source, 'html.parser')
            specs = {}
            
            # Парсим все характеристики
            for spec in soup.select('.specifications-list__el'):
                if spec.dt and spec.dd:
                    key = spec.dt.get_text(strip=True)
                    value = spec.dd.get_text(strip=True)
                    specs[key] = value
                    
            return specs
        
        except (TimeoutException, NoSuchElementException):
            time.sleep(2)
            continue
            
    return None

def main():
    driver = setup_driver()
    driver.get(BASE_URL)
    
    with open(OUTPUT_FILE, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=[
            'name', 'price', 'link', 'max_memory', 'specs'
        ])
        writer.writeheader()
        
        page_num = 1
        while True:
            print(f"Обработка страницы {page_num}")
            try:
                WebDriverWait(driver, 20).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, '.item-card__name'))
                )
                
                soup = BeautifulSoup(driver.page_source, 'html.parser')
                products = soup.select('.item-card')
                
                for product in products:
                    try:
                        name_elem = product.select_one('.item-card__name')
                        price_elem = product.select_one('.item-card__prices-price')
                        link_elem = product.select_one('.item-card__name-link')
                        
                        if not all([name_elem, price_elem, link_elem]):
                            continue
                            
                        product_data = {
                            'name': name_elem.get_text(strip=True),
                            'price': price_elem.get_text(strip=True).replace('₸', '').strip(),
                            'link': 'https://kaspi.kz' + link_elem['href']
                        }
                        
                        # Парсим страницу товара
                        specs = parse_product_page(driver, product_data['link'])
                        
                        if specs:
                            # Ищем память в разных вариантах написания
                            memory_keys = ['Максимальный объем памяти', 'Максимальный размер памяти', 'Объем памяти']
                            max_memory = None
                            
                            for key in memory_keys:
                                if key in specs:
                                    # Извлекаем числовое значение
                                    if 'Гб' in specs[key]:
                                        max_memory = specs[key].split('Гб')[0].strip()
                                    elif 'GB' in specs[key]:
                                        max_memory = specs[key].split('GB')[0].strip()
                                    
                                    if max_memory and max_memory.isdigit():
                                        if int(max_memory) >= 32:
                                            product_data['max_memory'] = max_memory
                                            product_data['specs'] = str(specs)
                                            writer.writerow(product_data)
                                            break
                        
                    except Exception as e:
                        print(f"Ошибка при обработке товара: {str(e)}")
                        continue
                        
                # Переход на следующую страницу
                try:
                    next_btn = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, 'a.pagination__next'))
                    )
                    next_btn.click()
                    page_num += 1
                    time.sleep(random.uniform(3, 5))  # Длинная задержка между страницами
                    
                except (TimeoutException, NoSuchElementException):
                    print("Достигнут конец списка")
                    break
                    
            except Exception as e:
                print(f"Критическая ошибка: {str(e)}")
                break
                
    driver.quit()
    print("Парсинг завершен. Результаты сохранены в", OUTPUT_FILE)

if __name__ == "__main__":
    main()
